// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title KipuBank - Banco descentralizado simple
/// @author GOC 
/// @notice Cada usuario tiene su bóveda personal de ETH.

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v5.0.2/contracts/access/Ownable.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v5.0.2/contracts/token/ERC20/ERC20.sol";
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";


contract KipuBank is Ownable, ERC20 {

    /*//////////////////////////////////////////////////////////////
                                ERRORES
    //////////////////////////////////////////////////////////////*/
    error KipuBank_DepositosLimiteReachazado();
    error KipuBank_LimiteRetirosExcedidos(uint256 requested, uint256 limit);
    error KipuBank_SaldoInsuficiente(uint256 requested, uint256 available);
    error KipuBank_FallaTransferencia();


    /*//////////////////////////////////////////////////////////////
                                EVENTOS
    //////////////////////////////////////////////////////////////*/
    event Depo(address indexed user, uint256 amount);
    event Reti(address indexed user, uint256 amount);
    event Log(string NombreFuncion, address sender, uint amount, bytes data);

    /*//////////////////////////////////////////////////////////////
                           VARIABLES DE ESTADO
    //////////////////////////////////////////////////////////////*/
/// @notice bóveda personal de cada usuario
    mapping(address => uint256) private s_boveda;
    

    /// @notice límite global de depósitos
    //  bankCap
    uint256 public immutable i_LimiteDepositos;

    /// @notice límite de retiro por transacción
    uint256 public immutable i_LimiteRetirosXTransaccion;

    /// @notice total de depósitos acumulados
    uint256 public s_TotalDepositosAcumulados;

    uint256 private s_TotalDepositosRealizados;
    uint256 private s_TotalRetirosRealizados; 
   
     AggregatorV3Interface internal priceFeed;

    /*//////////////////////////////////////////////////////////////
                               CONSTRUCTOR
    //////////////////////////////////////////////////////////////*/

    constructor(uint256 _LimiteDepositos, uint256 _LimiteRetirosXTransaccion) Ownable(msg.sender) ERC20("TokenKipu", "TKB") {
        
        i_LimiteDepositos = _LimiteDepositos;
        i_LimiteRetirosXTransaccion = _LimiteRetirosXTransaccion;

        // Emitir tokens hasta el limite de depositos
        _mint(msg.sender, i_LimiteDepositos);

        // Dirección del contrato Chainlink ETH/USD en Sepolia Testnet
        // Fuente oficial: https://docs.chain.link/data-feeds/price-feeds/addresses
        priceFeed = AggregatorV3Interface(
            0x694AA1769357215DE4FAC081bf1f309aDC325306
        );  

    } 

    /*//////////////////////////////////////////////////////////////
                               FUNCIONES
    //////////////////////////////////////////////////////////////*/
    
    fallback() external payable { 
        emit Log("fallback",msg.sender,msg.value,msg.data);
        revert();
    }
    receive() external payable {
        emit Log("receive",msg.sender,msg.value,"");
        revert();
    }


    //@notice Permite depositar ETH en tu bóveda
    function depositar() external payable {

        //uint256  u_EtherDepositado = msg.value * 1000000000000000000;
        
        if (s_TotalDepositosAcumulados + msg.value > i_LimiteDepositos) {
            revert KipuBank_DepositosLimiteReachazado();
        }
        

        s_boveda[msg.sender] += msg.value;
        s_TotalDepositosAcumulados += msg.value;
        s_TotalDepositosRealizados++;

        emit Depo(msg.sender, msg.value);
    }
    /// @notice Devuelve el saldo en bóveda de un usuario
    /// @param _user Dirección del usuario
    /// @return  saldo en wei
    /// Solo la cuenta del contrato puede vre el saldo
    function ObtenerSaldo(address _user) external view onlyOwner returns (uint256) {
    return s_boveda[_user];
   }
    
    /// @notice Devuelve la cantidad rde retiros realizados x el SC
    function ObtenerCantidadRetiros() external view returns (uint256) {
        return s_TotalRetirosRealizados;
    }
 
     /// @notice Devuelve la cantidad rde depositos realizados x el SC
    function ObtenerCantidadDepositos() external view returns (uint256) {
        return s_TotalDepositosRealizados;
    }

    /// @notice calcula la cantidad de Operaciones
    function CalculaCantidadOperaciones() private view returns (uint256){

        return s_TotalDepositosRealizados + s_TotalRetirosRealizados;
    }

    /// @notice Devuelve la cantidad Operaciones realizados x el SC
    function ObtenerCantidadOperacionesRealizadas() public view returns (uint256){
        return CalculaCantidadOperaciones();
    }    

    /// @notice Retira ether del depodito y lo retorna a la cuenta que invoca
    /// @param _cantidad cantidad de ether en wei a retirar de la boveda de la cuenta 
    function Retirar(uint256 _cantidad) external {
        
        if (_cantidad > i_LimiteRetirosXTransaccion) {
            revert KipuBank_LimiteRetirosExcedidos(_cantidad, i_LimiteRetirosXTransaccion);
        }
        if (_cantidad > s_boveda[msg.sender]) {
            revert KipuBank_SaldoInsuficiente(_cantidad, s_boveda[msg.sender]);
        }
       
        // Resto el retiro al saldo en la boveda
        s_boveda[msg.sender] -= _cantidad;
        
        //resto al Total de 
        s_TotalDepositosAcumulados -= _cantidad;

        s_TotalRetirosRealizados++;

        (bool ok, ) = msg.sender.call{value: _cantidad}("");
        // esto consume mas gas; mejor mensaje de error
        //reemplazar x error
        //require(ok, "Falla Traferencia");
        if (!ok) {
            revert KipuBank_FallaTransferencia();
        }

    
        emit Reti(msg.sender, _cantidad);
    }

    // 🔹 Obtiene el último precio de ETH/USD
    function getPrecioETH() public view returns (int) {
        (
            , 
            int precio, 
            , 
            , 
            
        ) = priceFeed.latestRoundData();

        // El precio tiene 8 decimales, por ejemplo: 340000000000 = $3400.00000000
        return precio;
    }

    // 🔹 Convierte un monto en wei (ETH * 1e18) a USD (sin decimales)
    function convertirETHaUSD(uint256 amountInWei) public view returns (uint256) {
        int precio = getPrecioETH(); // Precio en USD con 8 decimales
        // (precio * ETH) / (1e8 * 1e18) = USD
        uint256 usd = (uint256(precio) * amountInWei) / 1e26;
        return usd;
    }

    // 🔹 Ejemplo: devuelve cuántos USD vale 1 ETH
    function unETHenUSD() external view returns (uint256) {
        return convertirETHaUSD(1 ether);
    }

}
